# -*- coding: utf-8 -*-
"""Churn Prediction Study Case

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ay5RQvlFc4NREPL-HKtVqY-kzMU_z_UK

# **Key columns:**

1. Customer ID: A unique identifier for each customer.

2. Age: The age of the customer. Older customers might behave differently from younger customers in terms of loyalty or churn.

3. Tenure (Months):
The length of time the customer has been with the company (in months). Longer tenures often indicate loyalty and a lower likelihood of churn.

4. Monthly Charges:
The monthly bill amount for the customer. Higher charges may influence churn if customers feel they are not getting value for money.

5. Contract Type:
The type of contract the customer has (e.g., Monthly or Yearly). Customers with monthly contracts may be more likely to churn since they have shorter commitments.

6. Customer Service Calls: The number of times a customer has called customer service. More frequent calls could indicate dissatisfaction, leading to a higher risk of churn.

7. Churn (Target Variable):
Whether the customer has churned (1 = Yes, 0 = No). This is the target column we are trying to predict.
"""

# Import necessary libraries
import pandas as pd
import numpy as np

# Load the dataset
url = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vQMvFZeL17L_wIiGHNOuN-mi7Pz7Sujv4i_HVz7rzRX968nIBbEHNDl32c7iB3SJdxlWR4KKaA-fqmq/pub?gid=0&single=true&output=csv'
data = pd.read_csv(url)

# Display the first few rows
data.head()

# Display the summary statistics before handling missing values
print("\nInitial Dataset Summary:\n", data.describe())

# Check for missing values
missing_values = data.isnull().sum()
print("Missing Values:\n", missing_values)

"""# Preprocessing Data"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Load the dataset from Google Sheets
url = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vQMvFZeL17L_wIiGHNOuN-mi7Pz7Sujv4i_HVz7rzRX968nIBbEHNDl32c7iB3SJdxlWR4KKaA-fqmq/pub?gid=0&single=true&output=csv'
data = pd.read_csv(url)

# Display the first few rows to check the dataset
data.head()

# Encoding the 'Contract Type' column (Monthly/Yearly) into numerical values
label_encoder = LabelEncoder()
data['Contract Type'] = label_encoder.fit_transform(data['Contract Type'])

# Separate features and target variable
X = data.drop(['Customer ID', 'Churn'], axis=1)  # Exclude 'Customer ID' and target 'Churn'
y = data['Churn']  # Target variable

# Import the necessary class from sklearn
from sklearn.preprocessing import StandardScaler

# Feature Scaling: Standardizing numerical features for better model performance
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

"""# Split the data into training and testing sets"""

# Import the necessary class from sklearn
from sklearn.model_selection import train_test_split

# 2. Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

"""# Build Logistic Regression Model"""

# Import the necessary class from sklearn
from sklearn.linear_model import LogisticRegression

logreg = LogisticRegression()
logreg.fit(X_train, y_train)

"""# Make Predictions on the Test Set"""

y_pred = logreg.predict(X_test)

"""# Evaluate the Model's Performance"""

# Import necessary functions from sklearn.metrics
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

print(f"Accuracy: {accuracy * 100:.2f}%")
print("Confusion Matrix:")
print(conf_matrix)
print("Classification Report:")
print(class_report)

"""# Visualization"""

# Import necessary libraries for visualization
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
url = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vQMvFZeL17L_wIiGHNOuN-mi7Pz7Sujv4i_HVz7rzRX968nIBbEHNDl32c7iB3SJdxlWR4KKaA-fqmq/pub?gid=0&single=true&output=csv'
data = pd.read_csv(url)

"""1. Distribution of Churn"""

plt.figure(figsize=(6,4))
sns.countplot(x='Churn', data=data, palette='Set2')
plt.title('Distribution of Churn (Target Variable)')
plt.xlabel('Churn (0 = No, 1 = Yes)')
plt.ylabel('Count')
plt.show()

"""2. Visualizing the correlation matrix"""

plt.figure(figsize=(10,8))
# Exclude non-numeric columns like 'Customer ID' before calculating correlation
numerical_data = data.select_dtypes(include=np.number)
correlation_matrix = numerical_data.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix')
plt.show()

"""3. Boxplot of Monthly Charges vs Churn"""

plt.figure(figsize=(8,6))
sns.boxplot(x='Churn', y='Monthly Charges', data=data, palette='Set3')
plt.title('Boxplot of Monthly Charges vs Churn')
plt.show()

"""4. Feature Importance (Logistic Regression Coefficients)"""

# Plotting the coefficients of logistic regression model
coefficients = pd.DataFrame(logreg.coef_[0], X.columns, columns=['Coefficient'])

plt.figure(figsize=(10,6))
coefficients.sort_values(by='Coefficient').plot(kind='barh', legend=False)
plt.title('Feature Importance Based on Logistic Regression Coefficients')
plt.xlabel('Coefficient Value')
plt.show()

"""5. Confusion Matrix Visualization"""

from sklearn.metrics import ConfusionMatrixDisplay

plt.figure(figsize=(6,6))
ConfusionMatrixDisplay.from_estimator(logreg, X_test, y_test, cmap='Blues')
plt.title('Confusion Matrix')
plt.show()

"""6. ROC Curve Visualization"""

from sklearn.metrics import roc_curve, roc_auc_score

y_pred_prob = logreg.predict_proba(X_test)[:,1]
fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)
roc_auc = roc_auc_score(y_test, y_pred_prob)

plt.figure(figsize=(8,6))
plt.plot(fpr, tpr, label=f'Logistic Regression (AUC = {roc_auc:.2f})', color='darkorange')
plt.plot([0,1], [0,1], linestyle='--', color='gray')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend(loc='lower right')
plt.show()

"""# Intepretation

1. **Distribusi Churn (Variabel Target)**:
   - Grafik count menunjukkan bahwa sebagian besar pelanggan tidak mengalami churn (0), sedangkan pelanggan yang churn (1) jauh lebih sedikit. Ini menunjukkan adanya ketidakseimbangan dalam variabel target, yang dapat memengaruhi kinerja model.

2. **Matriks Korelasi**:
   - Matriks korelasi mengungkapkan adanya korelasi yang lemah antara variabel independen dan churn. Hubungan terkuat (meskipun masih lemah) terdapat antara `Tenure (Bulan)` dan churn (-0,07), menunjukkan bahwa masa berlangganan yang lebih lama mungkin sedikit mengurangi kemungkinan churn.

3. **Boxplot Biaya Bulanan vs. Churn**:
   - Boxplot menunjukkan bahwa pelanggan dengan biaya bulanan yang lebih tinggi sedikit lebih mungkin untuk churn, tetapi perbedaan antara pelanggan yang churn dan yang tidak dalam hal biaya bulanan tidaklah besar.

4. **Pentingnya Fitur (Koefisien Regresi Logistik)**:
   - Grafik batang koefisien regresi logistik menunjukkan bahwa `Panggilan Layanan Pelanggan` dan `Tipe Kontrak` adalah fitur yang paling penting untuk memprediksi churn. Jumlah panggilan layanan pelanggan yang lebih tinggi dan tipe kontrak tertentu meningkatkan kemungkinan churn.

5. **Matriks Kebingungan**:
   - Matriks kebingungan menunjukkan bahwa model regresi logistik dapat dengan akurat memprediksi pelanggan yang tidak churn, tetapi kesulitan dalam mengidentifikasi pelanggan yang churn (84 false negatives). Ini menunjukkan bahwa model memiliki sensitivitas yang rendah.

6. **Kurva ROC**:
   - Kurva ROC menunjukkan skor Area Under the Curve (AUC) sebesar 0,45, yang mendekati prediksi acak. Skor AUC yang rendah ini menunjukkan bahwa model regresi logistik kurang berkinerja baik dalam memprediksi churn.
"""